import os
import smtplib
import json
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from prettytable import PrettyTable

# Function for checking vulnerability with Trivy (Only over high)
def check_trivy_vulnerabilities(image_name):
    try:
        trivy_output = os.popen(f"trivy image --severity HIGH --format json {image_name}").read()
        trivy_data = json.loads(trivy_output)
        vulnerabilities = trivy_data.get('Results', [])[0].get('Vulnerabilities', [])
        high_vulns = [vuln for vuln in vulnerabilities if vuln['Severity'] == 'HIGH']
        return high_vulns
    except Exception as e:
        print(f"Error running Trivy scan: {e}")
        return None

# Email alert function
def send_alert(image_name, high_vulns, stage="initial"):
    from_email = "ksungho9991@gmail.com"
    to_email = "ksungho9991@gmail.com"
    password = "password"

    subject = f"Alert: Docker Image {image_name} - {stage.capitalize()}"
    
    body = ""
    if stage == "initial":
        body += f"Warning: Docker image {image_name} has {len(high_vulns)} HIGH vulnerabilities.\n\n"
    elif stage == "optimized":
        body += f"The image {image_name} has been optimized.\nCurrent HIGH vulnerabilities: {len(high_vulns)}.\n\n"

    if high_vulns:
        table = PrettyTable()
        table.field_names = ["Vulnerability ID", "Package Name", "Installed Version", "Fixed Version", "Severity"]
        for vuln in high_vulns:
            vid = vuln.get("VulnerabilityID", "N/A")
            pkg_name = vuln.get("PkgName", "N/A")
            installed_version = vuln.get("InstalledVersion", "N/A")
            fixed_version = vuln.get("FixedVersion", "N/A")
            severity = vuln.get("Severity", "N/A")
            table.add_row([vid, pkg_name, installed_version, fixed_version, severity])
        
        body += f"Here are the details of the HIGH vulnerabilities:\n\n{table}\n"

    # Setting Email
    message = MIMEMultipart()
    message['From'] = from_email
    message['To'] = to_email
    message['Subject'] = subject
    message.attach(MIMEText(body, 'plain'))

    try:
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()  # Activate TLS Encryption
            server.login(from_email, password)  # Login Gmail account
            server.sendmail(from_email, to_email, message.as_string())
            print(f"Email alert sent to {to_email}")
    except Exception as e:
        print(f"Failed to send email: {e}")

# Image build function adapting multi-layer build for optimization
def optimize_image(image_name):
    print("Optimizing the Docker image using multi-stage build...")

    # From openjdk:17-alpine AS build -> Using alpine, optimize the size of image
    # RUN apk update && apk upgrade --no-cache -> Update latest version package
    dockerfile_content = """
    # 빌드 스테이지
    FROM openjdk:17-alpine AS build

    # 최신 패키지로 업데이트
    RUN apk update && apk upgrade --no-cache

    # 소스 복사
    WORKDIR /app
    COPY . .

    # 소스 빌드
    RUN javac Main.java

    # 최종 스테이지 - 슬림한 이미지를 사용하여 크기 최적화
    FROM openjdk:17-alpine

    WORKDIR /app

    # 빌드된 결과물만 복사
    COPY --from=build /app/Main.class /app/

    # 애플리케이션 실행
    CMD ["java", "Main"]
    """

    # Create Dockerfile
    with open("Dockerfile", "w") as f:
        f.write(dockerfile_content)

    # Proceed build without using cache
    os.system(f"docker build --no-cache -t {image_name}_optimized .")

# Main Logic
if __name__ == "__main__":
    
    # ! Write image name you want to check !
    image_name = "castlehoo/my-java-app:1.0"
    
    # Checking vulnerability with Trivy (Only high level)
    high_vulns = check_trivy_vulnerabilities(image_name)

    if high_vulns is not None:
        print(f"Image {image_name} has {len(high_vulns)} HIGH vulnerabilities.")
        if len(high_vulns) > 5:
            # If vulnerability level exceeds 5, alert to users
            send_alert(image_name, high_vulns, stage="initial")
            
            # Optimization for less vulnerability
            optimize_image(image_name)
            
            # Re-check about optimized image with Trivy
            optimized_image_name = f"{image_name}_optimized"
            optimized_high_vulns = check_trivy_vulnerabilities(optimized_image_name)
            
            if optimized_high_vulns is not None:
                print(f"Optimized image {optimized_image_name} has {len(optimized_high_vulns)} HIGH vulnerabilities.")
                send_alert(optimized_image_name, optimized_high_vulns, stage="optimized")
            else:
                print(f"Failed to check vulnerabilities for optimized image {optimized_image_name}")
        else:
            print(f"Image {image_name} has acceptable HIGH vulnerabilities ({len(high_vulns)}).")
    else:
        print(f"Failed to check vulnerabilities for image {image_name}")
